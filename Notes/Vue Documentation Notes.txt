                            Essentials
							**********

Introduction
************
- core library is focused on the view layer only
- easy to integrate with other libraries or projects
- capable of powering sophisticated single-page applications when used in combination with modern tooling
- Declarative Rendering
	- At the core of Vue.js is a system that enables declarative rendering of data to the DOM
	- double curly braces, initialized in Vue instance, makes data reactive
	- v-bind attribute is called a directive
		- v indicates they are provided by vue
		- they apply special reactive behavior to the rendered DOM
		- 'keep the elements title attribute up to date'
	- v-if - it's easy to toggle the presence of an element too
		- we can bind data to not only text and attributes, but also the structure of the DOM
	- there are quite a few other directives, for example v-for
	- v-on directive to attach event listeners that invoke methods on our Vue instances
	- Note that we update the state of the app without touching the DOM, all DOM manipulations are handled by Vue, and the code you write is focused on the underlying logic
	- v-model directive makes two-way binding between form input and app state a breeze
- Composing with Components
	- abstraction that allows us to build large-scale applications composed of small, self-contained, and often reusable components
	- In Vue, a component is a Vue instance with pre-defined options
	- Can embed a component in a parent component
	- Can also pass props from parent component to child
	- In a large application, it is necessary to divide the whole app into components to make development manageable
	
The Vue Instance
****************
- Every Vue application starts by creating a new Vue instance with the Vue function
- Vue's design was inspired by the MVVM pattern
- Data and Methods
	- When a Vue instance is created, it adds all the properties found in its data object to Vue's reactivity system
	- When the values of those properties change, the view will react, updating to match the new values
	- It should be noted that properties in data are only reactive if they existed when the instance was created
	- If you know you'll need a property later, but it starts out empty or non-existent, you'll need to set some initial value
	- in addition to data properties, Vue instances expose a number of useful instance properties and methods. Prefixed with $ to differentiate them from user-defined properties
- Instance Lifecycle Hooks
	- Vue instances run functions called lifecycle hooks, giving users the opportunity to add their own code at specific stages
	
Template Syntax
***************
- Vue uses an HTML based template syntax that allows you to declaratively bind the rendered DOM to the underlying Vue instance data
- you can also directly write render functions instead of templates, with optional JSX support
- Interpolations
	- the most basic form of data binding is text interpolation using double curly braces
	- In order to output real HTML, you will need to use the v-html directive
- JavaScript expressions
	- so far we've only been binding to simple property keys n our templates
	- Vue supports the full power of JS expressions inside all data bindings
- Directives (as discussed in previous section)

Computed Properties and Watchers
********************************
- Computed Properties
	- Expressions are convenient, but putting too much logic in your templates can make them bloated and hard to maintain
	- Can make templates no longer simple and declarative
	- that's why for any complex logic you should use a computed property
	- computed properties are properties that use a method
	- computed properties are cached based on their reactive dependencies
	- in comparison, a method invocation will always run the function whenever a re-render happens
- Computed vs Watched property
	- Watch is imperative and repetitive
- Computed Setter
	- computed properties are by default getter-only, but you can also provide a setter when you need it
- Watchers
	- Useful when you want to perform asynchronous or expensive operations in response to changing data
	- Using the watch option allows us to perform an asynchronous operation (accessing an API), limit how often we perform that operation, and set intermediary states until we get a final answer
	
Class and Style Bindings
************************
- a common need for data binding is manipulating an element's class list and its inline styles
- we can pass an object to v-bind:class to dyamically toggle classes

Conditional Rendering
*********************
- the directive v-if is used to conditionally render a block
- if we want to toggle more than one element, we can use v-if on a template element, which serves as an invisible wrapper

List Rendering
**************
- Mapping an Array to Elements with v-for

Event Handling
**************
- We can use the v-on directive to listen to DOM events and run some JS when they're triggered
	
Form Input Bindings
*******************
- You can use the v-model directive to create two way data bindings on form input etc

Component Basics
****************
- Components are reusable Vue instances with a name
- We can use this component as a custom element inside a root Vue instance created with new Vue
- since components are reusable Vue instances, they accept the same options as new Vue, such as data, computed, watch, methods, ad lifecycle hooks
- Can pass data to child components with props